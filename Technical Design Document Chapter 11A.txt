Meghan Farrell
07/20/2024
Program Description
The program simulates a simple Poker game where a player is dealt a hand of five cards. The player can then choose to replace any number of these cards with new ones from the deck. The final hand is displayed after the replacements.

Functions
- print_hand(hand): Prints the cards in the given hand.
- poker_game(): Main function to manage the game flow.
Variables
- deck: An instance of the Deck class representing the deck of cards.
- hand: A list of Card objects representing the player's hand.
- indices_to_replace: A list of integers representing the indices of the cards to be replaced.
Pseudocode
1. Import random
2. Define class Card
* Method init(self, rank, suit)
o Initialize the card's rank and suit attributes
o self.rank = rank
o self.suit = suit
* Method str(self)
o Return string representation of the card
o Return "{self.rank} of {self.suit}"
3. Define class Deck
* Method init(self)
o Initialize ranks and suits lists
o ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
o suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
o Create a list of cards for each combination of rank and suit
o self.cards = [Card(rank, suit) for suit in suits for rank in ranks]
o Call self.shuffle()
* Method shuffle(self)
o Shuffle self.cards using random.shuffle()
* Method deal(self, num)
o Check if num is greater than the number of remaining cards in the deck
o If true, raise ValueError "Not enough cards left to deal"
o Otherwise, return num cards from self.cards
o Return [self.cards.pop() for _ in range(num)]
4. Define function print_hand(hand)
* Parameters: hand
o Iterate over the hand list
o For each card, print the index (1-based) and string representation of the card
5. Define function poker_game()
* Initialize deck as instance of Deck
* Deal 5 cards from deck and assign to hand
o hand = deck.deal(5)
* Print "Your initial hand:"
* Call print_hand(hand)
* Prompt user to enter card numbers to replace (e.g., "1, 3, 5")
o indices_to_replace = input("Enter the card numbers to replace (e.g., 1, 3, 5): ")
o Convert input strings to zero-based indices
o indices_to_replace = [int(x) - 1 for x in indices_to_replace.split(',') if x.strip().isdigit()]
* Replace the selected cards
o For each index in indices_to_replace:
* If index is valid (0 <= index < len(hand)):
* Replace hand[index] with a new card from deck.deal(1)
* hand[index] = deck.deal(1)[0]
* Print "Your new hand:"
* Call print_hand(hand)
6. Execute the game function
* Call poker_game()
Repository: https://github.com/swagham/COP2373.git 
